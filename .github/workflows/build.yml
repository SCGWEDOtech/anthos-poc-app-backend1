on:
  push:
    tags:
      - v*

name: Build and deliver to dev

jobs:
  build:
    name: Build and push
    runs-on: ubuntu-latest

    outputs:
      IMAGE_REPOSITORY: ${{ steps.build-image.outputs.IMAGE_REPOSITORY }}

    env:
      IMAGE_REPOSITORY: fibonacci-backend1

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.IMAGE_REPOSITORY }}
          IMAGE_TAG: ${{ steps.get_version.outputs.VERSION }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=IMAGE_REPOSITORY::$ECR_REPOSITORY:$IMAGE_TAG"

  deploy-mr:
    name: Create MR for deployment
    runs-on: ubuntu-latest

    needs: [build]

    env:
      GIT_EMAIL: action@github.com
      GIT_NAME: GitHub Action
      GIT_BASE_BRANCH: master

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          repository: SCGWEDOtech/gitops-k8s-poc
          token: ${{ secrets.GITOPS_K8S_POC_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Config git
        run: |
          git config --global user.email "$GIT_EMAIL"
          git config --global user.name "$GIT_NAME"

      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/}

      - name: Install kustomize
        run: |
          mkdir $GITHUB_WORKSPACE/bin
          cd $GITHUB_WORKSPACE/bin
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash -s
          echo "::add-path::$GITHUB_WORKSPACE/bin"
          chmod +x $GITHUB_WORKSPACE/bin/kustomize

      - name: Checkout new branch
        id: get_branch
        env:
          GIT_BRANCH: deploy/fibonacci/backend1-${{ steps.get_version.outputs.VERSION }}
        run: |
          git checkout -b $GIT_BRANCH
          echo "::set-output name=BRANCH::$GIT_BRANCH"

      - name: Edit image tag and commit
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_REPOSITORY: ${{ needs.build.outputs.IMAGE_REPOSITORY }}
        run: |
          cd fibonacci/kustomize/overlays/dev/ap-southeast-1
          kustomize edit set image fibonacci/backend1=$ECR_REGISTRY/$IMAGE_REPOSITORY

          git add kustomization.yaml
          git commit -m "feat(fibo/dev/ap-se-1): update backend1 image tag"

      - name: Push changes & create merge request
        shell: bash
        env:
          GIT_SHA: ${{ github.sha }}
          GIT_BRANCH: ${{ steps.get_branch.outputs.BRANCH }}
          GITHUB_TOKEN: ${{ secrets.GITOPS_K8S_POC_TOKEN }}
          VERSION: ${{ steps.get_version.outputs.VERSION }}
        run: |
          if [[ `git --no-pager log "$GIT_BASE_BRANCH..$GIT_BRANCH" --decorate=short --pretty=oneline -n1` ]]; then
            git push origin $GIT_BRANCH
            hub pull-request --base $GIT_BASE_BRANCH -m "Deploy backend1 $VERSION"
          else
            echo 'No changes'
          fi

